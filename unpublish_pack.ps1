param (
    [string]$packageName,         # Nom du package NPM
    [string[]]$excludeVersions    # Liste des versions √† exclure
)

# V√©rifier si le param√®tre packageName est fourni
if (-not $packageName) {
    Write-Host "‚ùå Erreur : Vous devez fournir un nom de package en param√®tre." -ForegroundColor Red
    Write-Host "üîπ Utilisation : .\unpublish-npm.ps1 nom-du-package -excludeVersions '1.0.0','1.2.3'"
    exit 1
}

# R√©cup√©rer toutes les versions publi√©es du package
$versions = npm view $packageName versions --json | ConvertFrom-Json

if ($versions -is [System.Array]) {
    Write-Host "üîç Versions trouv√©es pour $packageName :" -ForegroundColor Green
    $versions | ForEach-Object { Write-Host " - $_" }

    # Filtrer les versions √† supprimer en excluant celles sp√©cifi√©es
    $versionsToDelete = $versions | Where-Object { $excludeVersions -notcontains $_ }

    if ($versionsToDelete.Count -eq 0) {
        Write-Host "‚ö†Ô∏è Aucune version √† supprimer apr√®s filtrage." -ForegroundColor Yellow
        exit 0
    }

    Write-Host "üöÄ D√©publication des versions suivantes de $packageName :" -ForegroundColor Yellow
    $versionsToDelete | ForEach-Object { Write-Host " - $_" }

    # D√©publier chaque version excluant celles prot√©g√©es
    $versionsToDelete | ForEach-Object {
        $version = $_
        Write-Host "‚ùå Suppression de $packageName@$version ..." -ForegroundColor Cyan
        npm unpublish "$packageName@$version" --force
        Start-Sleep -Seconds 2  # Pause pour √©viter les limitations NPM
    }

    Write-Host "‚úÖ Toutes les versions non exclues de $packageName ont √©t√© d√©publi√©es." -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Aucune version trouv√©e pour $packageName ou erreur lors de la r√©cup√©ration des versions." -ForegroundColor Red
}
